# -----------------------------------------------------------------------------
# 1) Базовый образ с Python 3.11
# -----------------------------------------------------------------------------
FROM python:3.11-slim

# -----------------------------------------------------------------------------
# 2) Переключаемся в рабочую директорию /app внутри контейнера
# -----------------------------------------------------------------------------
WORKDIR /app

# -----------------------------------------------------------------------------
# 3) Копируем файл с зависимостями и устанавливаем их
# -----------------------------------------------------------------------------
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# -----------------------------------------------------------------------------
# 4) Копируем код бота и шаблоны JSON внутрь образа
#
#    - /app/bot.py        — основной скрипт бота
#    - /app/menu.json     — шаблон menu.json
#    - /app/languages.json — шаблон languages.json
# -----------------------------------------------------------------------------
COPY bot.py            /app/bot.py
COPY menu.json         /app/menu.json
COPY languages.json    /app/languages.json

# -----------------------------------------------------------------------------
# 5) ENTRYPOINT: при старте контейнера проверяем, есть ли в /data/menu.json
#    и /data/languages.json; если их нет — копируем из /app/.
#    После этого запускаем бота.
#
#    Railway автоматически монтирует /data как персистентный том, так что
#    всё, что бот запишет в /data/menu.json и /data/languages.json, сохранится
#    между деплоями.
# -----------------------------------------------------------------------------
ENTRYPOINT [ "sh", "-c", "\
    mkdir -p /data && \
    if [ ! -f /data/menu.json ]; then \
      cp /app/menu.json /data/menu.json; \
    fi && \
    if [ ! -f /data/languages.json ]; then \
      cp /app/languages.json /data/languages.json; \
    fi && \
    python /app/bot.py" ]
