# -*- coding: utf-8 -*-
import os
import json
import requests
import telebot
from telebot import types

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ‚Äî‚Äî‚Äî
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å -e TOKEN=<–≤–∞—à_—Ç–æ–∫–µ–Ω>.")
bot = telebot.TeleBot(TOKEN)

GROUP_CHAT_ID    = int(os.getenv("GROUP_CHAT_ID",    "-1002414380144"))
PERSONAL_CHAT_ID = int(os.getenv("PERSONAL_CHAT_ID", "424751188"))
MENU_PATH = "menu.json"
DEFAULT_CATEGORY_PRICE = 1300

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
PAY_COD        = "üíµ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
PAY_TRANSFER   = "üí≥ –ü–µ—Ä–µ–≤–æ–¥ –≥—Ä–∏–≤–Ω–∞–º–∏ –∏–ª–∏ —Ä—É–±–ª—è–º–∏"
PAY_CRYPTO     = "‚Çø –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π"

# –ü–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
TRANSFER_UAH_CARD     = "4441 1111 5771 8424 ‚Äî –í–ª–∞–¥"
TRANSFER_RUB_PHONE    = "+7 996 996 12 99 ‚Äî –ê—Ä—Ç—É—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ"
CRYPTO_ADDRESS        = "TUnMJ7oCtSDCHZiQSMrFjShkUPv18SVFDc"  # Tron (TRC20)

# ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é ‚Äî‚Äî‚Äî
def load_menu():
    if not os.path.exists(MENU_PATH):
        with open(MENU_PATH, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
        return {}
    try:
        with open(MENU_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        with open(MENU_PATH, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
        return {}

def save_menu(menu_data):
    with open(MENU_PATH, "w", encoding="utf-8") as f:
        json.dump(menu_data, f, ensure_ascii=False, indent=2)

menu = load_menu()
user_data = {}

# ‚Äî‚Äî‚Äî –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç ‚Äî‚Äî‚Äî
def fetch_rates():
    sources = [
        ("https://api.exchangerate.host/latest", {"base":"TRY","symbols":"RUB,USD,UAH"}),
        ("https://open.er-api.com/v6/latest/TRY", {})
    ]
    for url, params in sources:
        try:
            r = requests.get(url, params=params, timeout=5)
            data = r.json()
            rates = data.get("rates") or data.get("conversion_rates")
            if rates:
                return {k: rates[k] for k in ("RUB","USD","UAH") if k in rates}
        except:
            continue
    return {"RUB":0, "USD":0, "UAH":0}

# ‚Äî‚Äî‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî‚Äî‚Äî
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in menu:
        kb.add(cat)
    kb.add("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    kb.add("üìù –û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    kb.add("üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    return kb

def get_flavors_keyboard(cat):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    price = menu[cat]["price"]
    for it in menu[cat]["flavors"]:
        stock = it.get("stock", 0)
        if stock > 0:
            emoji = it.get("emoji", "").strip()
            flavor = it["flavor"]
            label = f"{emoji} {flavor} ({price}‚Ç∫) [{stock} —à—Ç]" if emoji else f"{flavor} ({price}‚Ç∫) [{stock} —à—Ç]"
            kb.add(label)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def description_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def address_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π", request_location=True))
    kb.add("üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ")
    kb.add("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def contact_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    kb.add("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∏–∫")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def comment_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚úèÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É")
    kb.add("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def view_cart_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚ûï Add Category", "‚ûñ Remove Category")
    kb.add("üí≤ Fix Price", "ALL IN", "üîÑ Actual Flavor")
    kb.add("‚¨ÖÔ∏è Back", "‚ùå Cancel")
    return kb

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî‚Äî‚Äî
@bot.message_handler(commands=['start'])
def cmd_start(message):
    user_data[message.chat.id] = {
        "cart": [], "current_category": None,
        "wait_for_address": False, "wait_for_contact": False, "wait_for_comment": False,
        "pending_order": None,
        "awaiting_transfer_tx": False, "awaiting_crypto_tx": False,
        "edit_phase": None, "edit_cat": None, "edit_flavor": None,
        "edit_cart_phase": None, "edit_index": None
    }
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_keyboard()
    )

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /change ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º) ‚Äî‚Äî‚Äî
@bot.message_handler(commands=['change'])
def cmd_change(message):
    data = user_data.setdefault(message.chat.id, {
        "cart": [], "current_category": None,
        "wait_for_address": False, "wait_for_contact": False, "wait_for_comment": False,
        "pending_order": None,
        "awaiting_transfer_tx": False, "awaiting_crypto_tx": False,
        "edit_phase": None, "edit_cat": None, "edit_flavor": None,
        "edit_cart_phase": None, "edit_index": None
    })
    data['edit_phase'] = 'choose_action'
    bot.send_message(message.chat.id, "Menu editing: choose action", reply_markup=edit_action_keyboard())

# ‚Äî‚Äî‚Äî –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî‚Äî‚Äî
@bot.message_handler(content_types=['text','location','venue','contact'])
def universal_handler(message):
    cid = message.chat.id
    text = message.text or ""
    data = user_data.setdefault(cid, {
        "cart": [], "current_category": None,
        "wait_for_address": False, "wait_for_contact": False, "wait_for_comment": False,
        "pending_order": None,
        "awaiting_transfer_tx": False, "awaiting_crypto_tx": False,
        "edit_phase": None, "edit_cat": None, "edit_flavor": None,
        "edit_cart_phase": None, "edit_index": None
    })

    # ‚Äî‚Äî‚Äî –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã (—É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ) ‚Äî‚Äî‚Äî
    if data.get('edit_cart_phase'):
        # 1) choose_action: ¬´–£–¥–∞–ª–∏—Ç—å N¬ª –∏–ª–∏ ¬´–ò–∑–º–µ–Ω–∏—Ç—å N¬ª –∏–ª–∏ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª
        if data['edit_cart_phase'] == 'choose_action':
            if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                data['edit_cart_phase'] = None
                data['edit_index'] = None
                bot.send_message(cid, "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
                return

            if text.startswith("–£–¥–∞–ª–∏—Ç—å "):
                try:
                    idx = int(text.split()[1]) - 1
                except:
                    bot.send_message(cid, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
                    data['edit_cart_phase'] = None
                    data['edit_index'] = None
                    return
                grouped = {}
                for item in data['cart']:
                    key = (item['category'], item['flavor'], item['price'])
                    grouped[key] = grouped.get(key, 0) + 1
                items_list = list(grouped.items())
                if idx < 0 or idx >= len(items_list):
                    bot.send_message(cid, "–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.", reply_markup=get_main_keyboard())
                    data['edit_cart_phase'] = None
                    return
                key_to_remove, _ = items_list[idx]
                cat, flavor, price = key_to_remove
                data['cart'] = [it for it in data['cart'] if not (it['category']==cat and it['flavor']==flavor and it['price']==price)]
                data['edit_cart_phase'] = None
                data['edit_index'] = None
                bot.send_message(cid, f"–£–¥–∞–ª–µ–Ω–æ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ¬´{flavor}¬ª.", reply_markup=get_main_keyboard())
                return

            if text.startswith("–ò–∑–º–µ–Ω–∏—Ç—å "):
                try:
                    idx = int(text.split()[1]) - 1
                except:
                    bot.send_message(cid, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
                    data['edit_cart_phase'] = None
                    return
                grouped = {}
                for item in data['cart']:
                    key = (item['category'], item['flavor'], item['price'])
                    grouped[key] = grouped.get(key, 0) + 1
                items_list = list(grouped.items())
                if idx < 0 or idx >= len(items_list):
                    bot.send_message(cid, "–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.", reply_markup=get_main_keyboard())
                    data['edit_cart_phase'] = None
                    return
                data['edit_index'] = idx
                data['edit_cart_phase'] = 'enter_qty'
                key_chosen, count = items_list[idx]
                cat, flavor, price = key_chosen
                bot.send_message(cid, f"–¢–æ–≤–∞—Ä: {cat} ‚Äî {flavor} ‚Äî {price}‚Ç∫ (–≤ –∫–æ—Ä–∑–∏–Ω–µ {count} —à—Ç).\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (0 —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):")
                return

        # 2) enter_qty: –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if data['edit_cart_phase'] == 'enter_qty':
            if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                data['edit_cart_phase'] = None
                data['edit_index'] = None
                bot.send_message(cid, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
                return
            if not text.isdigit():
                bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                return
            new_qty = int(text)
            grouped = {}
            for item in data['cart']:
                key = (item['category'], item['flavor'], item['price'])
                grouped[key] = grouped.get(key, 0) + 1
            items_list = list(grouped.items())
            idx = data['edit_index']
            if idx < 0 or idx >= len(items_list):
                bot.send_message(cid, "–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.", reply_markup=get_main_keyboard())
                data['edit_cart_phase'] = None
                data['edit_index'] = None
                return
            key_chosen, old_count = items_list[idx]
            cat, flavor, price = key_chosen
            data['cart'] = [it for it in data['cart'] if not (it['category']==cat and it['flavor']==flavor and it['price']==price)]
            for _ in range(new_qty):
                data['cart'].append({'category': cat, 'flavor': flavor, 'price': price})
            data['edit_cart_phase'] = None
            data['edit_index'] = None
            if new_qty == 0:
                bot.send_message(cid, f"–¢–æ–≤–∞—Ä ¬´{flavor}¬ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.", reply_markup=get_main_keyboard())
            else:
                bot.send_message(cid, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ¬´{flavor}¬ª –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_qty}.", reply_markup=get_main_keyboard())
            return

    # ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ö–æ—Ä–∑–∏–Ω–∞¬ª ‚Äî‚Äî‚Äî
    if text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        cart = data['cart']
        if not cart:
            bot.send_message(cid, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_keyboard())
            return
        grouped = {}
        for item in cart:
            key = (item['category'], item['flavor'], item['price'])
            grouped[key] = grouped.get(key, 0) + 1
        items_list = list(grouped.items())
        msg_lines = ["–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:"]
        for idx, (key, count) in enumerate(items_list, start=1):
            cat, flavor, price = key
            msg_lines.append(f"{idx}. {cat} ‚Äî {flavor} ‚Äî {price}‚Ç∫ x {count}")
        msg_text = "\n".join(msg_lines)
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for idx, (_key, _count) in enumerate(items_list, start=1):
            kb.add(f"–£–¥–∞–ª–∏—Ç—å {idx}", f"–ò–∑–º–µ–Ω–∏—Ç—å {idx}")
        kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        data['edit_cart_phase'] = 'choose_action'
        bot.send_message(cid, msg_text, reply_markup=kb)
        return

    # ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é (/change) ‚Äî‚Äî‚Äî
    if data.get('edit_phase'):
        phase = data['edit_phase']
        if text == "‚¨ÖÔ∏è Back":
            data.pop('edit_cat', None)
            data.pop('edit_flavor', None)
            data['edit_phase'] = 'choose_action'
            bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
            return
        if text == "‚ùå Cancel":
            data.pop('edit_phase', None)
            data.pop('edit_cat', None)
            data.pop('edit_flavor', None)
            bot.send_message(cid, "Menu editing cancelled.", reply_markup=get_main_keyboard())
            return
        # 1) choose_action
        if phase == 'choose_action':
            if text == "‚ûï Add Category":
                data['edit_phase'] = 'add_category'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Enter new category name:", reply_markup=kb)
            elif text == "‚ûñ Remove Category":
                data['edit_phase'] = 'remove_category'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Select category to remove:", reply_markup=kb)
            elif text == "üí≤ Fix Price":
                data['edit_phase'] = 'choose_fix_price_cat'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Select category to fix price for:", reply_markup=kb)
            elif text == "ALL IN":
                data['edit_phase'] = 'choose_all_in_cat'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Select category to replace full flavor list:", reply_markup=kb)
            elif text == "üîÑ Actual Flavor":
                data['edit_phase'] = 'choose_cat_actual'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Select category to update flavor stock:",	reply_markup=kb)
            else:
                bot.send_message(cid, "Choose action:", reply_markup=edit_action_keyboard())
            return
        # 2) add_category
        if phase == 'add_category':
            if text == "‚¨ÖÔ∏è Back":
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            new_cat = text.strip()
            if not new_cat or new_cat in menu:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Invalid or existing name. Try again:", reply_markup=kb)
                return
            menu[new_cat] = {"price": DEFAULT_CATEGORY_PRICE, "flavors": []}
            save_menu(menu)
            data.pop('edit_cat', None)
            data['edit_phase'] = 'choose_action'
            bot.send_message(
                cid,
                f"Category ¬´{new_cat}¬ª added with price {DEFAULT_CATEGORY_PRICE}‚Ç∫.",
                reply_markup=edit_action_keyboard()
            )
            return
        # 3) remove_category
        if phase == 'remove_category':
            if text == "‚¨ÖÔ∏è Back":
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            if text in menu:
                del menu[text]
                save_menu(menu)
                data.pop('edit_cat', None)
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, f"Category ¬´{text}¬ª removed.", reply_markup=edit_action_keyboard())
            else:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Select valid category.", reply_markup=kb)
            return
        # 4) choose_fix_price_cat
        if phase == 'choose_fix_price_cat':
            if text == "‚¨ÖÔ∏è Back":
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            if text in menu:
                data['edit_cat'] = text
                data['edit_phase'] = 'enter_new_price'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, f"Enter new price in ‚Ç∫ for category ¬´{text}¬ª:", reply_markup=kb)
            else:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Choose category from the list.", reply_markup=kb)
            return
        # 5) enter_new_price
        if phase == 'enter_new_price':
            if text == "‚¨ÖÔ∏è Back":
                data.pop('edit_cat', None)
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            cat = data.get('edit_cat')
            try:
                new_price = float(text.strip())
            except:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Invalid price format. Enter a number, e.g. 1500:", reply_markup=kb)
                return
            menu[cat]["price"] = int(new_price)
            save_menu(menu)
            bot.send_message(cid, f"Price for category ¬´{cat}¬ª set to {int(new_price)}‚Ç∫.", reply_markup=edit_action_keyboard())
            data.pop('edit_cat', None)
            data['edit_phase'] = 'choose_action'
            return
        # 6) choose_all_in_cat
        if phase == 'choose_all_in_cat':
            if text == "‚¨ÖÔ∏è Back":
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            if text in menu:
                data['edit_cat'] = text
                current_list = [f"{itm['flavor']} - {itm['stock']}" for itm in menu[text]["flavors"]]
                joined = "\n".join(current_list) if current_list else "(empty)"
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(
                    cid,
                    f"Current flavors in ¬´{text}¬ª (one per line as \"Name - qty\"):\n\n{joined}\n\n"
                    "Send the full updated list in the same format. Each line: ‚ÄúName - qty‚Äù.",
                    reply_markup=kb
                )
                data['edit_phase'] = 'replace_all_in'
            else:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Choose category from the list.", reply_markup=kb)
            return
        # 7) replace_all_in
        if phase == 'replace_all_in':
            if text == "‚¨ÖÔ∏è Back":
                data.pop('edit_cat', None)
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            cat = data.get('edit_cat')
            lines = text.strip().splitlines()
            new_flavors = []
            for line in lines:
                if '-' not in line:
                    continue
                name, qty = map(str.strip, line.rsplit('-', 1))
                if not qty.isdigit() or not name:
                    continue
                new_flavors.append({"emoji": "", "flavor": name, "stock": int(qty)})
            menu[cat]["flavors"] = new_flavors
            save_menu(menu)
            bot.send_message(cid, f"Full flavor list for ¬´{cat}¬ª has been replaced.", reply_markup=edit_action_keyboard())
            data.pop('edit_cat', None)
            data['edit_phase'] = 'choose_action'
            return
        # 8) choose_cat_actual
        if phase == 'choose_cat_actual':
            if text == "‚¨ÖÔ∏è Back":
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            if text in menu:
                data['edit_cat'] = text
                data['edit_phase'] = 'choose_flavor_actual'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for it in menu[text]["flavors"]:
                    flavor = it["flavor"]
                    stock = it.get("stock", 0)
                    kb.add(f"{flavor} [{stock} —à—Ç]")
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Select flavor to update stock:",	reply_markup=kb)
            else:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Choose category from the list.", reply_markup=kb)
            return
        # 9) choose_flavor_actual
        if phase == 'choose_flavor_actual':
            if text == "‚¨ÖÔ∏è Back":
                data.pop('edit_cat', None)
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            cat = data.get('edit_cat')
            flavor_name = text.split(' [')[0]
            exists = any(it["flavor"] == flavor_name for it in menu.get(cat, {}).get("flavors", []))
            if exists:
                data['edit_flavor'] = flavor_name
                data['edit_phase'] = 'enter_actual_qty'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫!", reply_markup=kb)
            else:
                bot.send_message(cid, "Flavor not found. Choose again:", reply_markup=edit_action_keyboard())
                data['edit_phase'] = 'choose_action'
            return
        # 10) enter_actual_qty
        if phase == 'enter_actual_qty':
            if text == "‚¨ÖÔ∏è Back":
                data.pop('edit_flavor', None)
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
                return
            cat = data.get('edit_cat')
            flavor = data.get('edit_flavor')
            if not text.isdigit():
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚¨ÖÔ∏è Back")
                bot.send_message(cid, "Please enter a valid number!", reply_markup=kb)
                return
            new_stock = int(text)
            for it in menu[cat]["flavors"]:
                if it["flavor"] == flavor:
                    it["stock"] = new_stock
                    break
            save_menu(menu)
            bot.send_message(cid, f"Stock for flavor ¬´{flavor}¬ª in category ¬´{cat}¬ª set to {new_stock}.", reply_markup=edit_action_keyboard())
            data.pop('edit_cat', None)
            data.pop('edit_flavor', None)
            data['edit_phase'] = 'choose_action'
            return

        data['edit_phase'] = 'choose_action'
        bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
        return

    # ‚Äî‚Äî‚Äî –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ ‚Äî‚Äî‚Äî
    if data.get('wait_for_address'):
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            data['wait_for_address'] = False
            data['current_category'] = None
            bot.send_message(cid, "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=get_main_keyboard())
            return
        if text == "üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ":
            bot.send_message(cid, "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É:\nüìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Üí ¬´–í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ¬ª ‚Üí –º–µ—Ç–∫–∞ ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å", reply_markup=types.ReplyKeyboardRemove())
            return
        if message.content_type == 'venue' and message.venue:
            v = message.venue
            address = f"{v.title}, {v.address}\nüåç https://maps.google.com/?q={v.location.latitude},{v.location.longitude}"
        elif message.content_type == 'location' and message.location:
            lat, lon = message.location.latitude, message.location.longitude
            address = f"üåç https://maps.google.com/?q={lat},{lon}"
        elif text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å":
            bot.send_message(cid, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=types.ReplyKeyboardRemove())
            return
        elif message.content_type == 'text' and message.text:
            address = message.text.strip()
        else:
            bot.send_message(cid, "–ù—É–∂–µ–Ω –∞–¥—Ä–µ—Å –∏–ª–∏ –ª–æ–∫–∞—Ü–∏—è:", reply_markup=address_keyboard())
            return

        data['address'] = address
        data['wait_for_address'] = False
        data['wait_for_contact'] = True
        bot.send_message(cid, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=contact_keyboard())
        return

    # ‚Äî‚Äî‚Äî –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ‚Äî‚Äî‚Äî
    if data.get('wait_for_contact'):
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            data['wait_for_address'] = True
            data['wait_for_contact'] = False
            bot.send_message(cid, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=address_keyboard())
            return
        if text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∏–∫":
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram-–Ω–∏–∫ (–±–µ–∑ @):", reply_markup=types.ReplyKeyboardRemove())
            return
        if message.content_type == 'contact' and message.contact:
            contact = message.contact.phone_number
        elif message.content_type == 'text' and message.text:
            contact = "@" + message.text.strip().lstrip("@")
        else:
            bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=contact_keyboard())
            return

        data['contact'] = contact
        data['wait_for_contact'] = False
        data['wait_for_comment'] = True
        bot.send_message(cid, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:", reply_markup=comment_keyboard())
        return

    # ‚Äî‚Äî‚Äî –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Äî‚Äî‚Äî
    if data.get('wait_for_comment'):
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            data['wait_for_contact'] = True
            data['wait_for_comment'] = False
            bot.send_message(cid, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:", reply_markup=contact_keyboard())
            return
        if text == "‚úèÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É":
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", reply_markup=types.ReplyKeyboardRemove())
            return
        if message.content_type == 'text' and text != "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
            data['comment'] = text.strip()
            bot.send_message(cid, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.", reply_markup=comment_keyboard())
            return
        if text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
            total_try = sum(i['price'] for i in data['cart'])
            rates = fetch_rates()
            rub = round(total_try * rates.get("RUB", 0) + 500, 2)
            usd = round(total_try * rates.get("USD", 0) + 2,   2)
            uah = round(total_try * rates.get("UAH", 0) + 200, 2)

            summary_rus = "\n".join(f"{i['category']}: {i['flavor']} ‚Äî {i['price']}‚Ç∫" for i in data['cart'])
            summary_en = summary_rus  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏

            data['pending_order'] = {
                "cart": data['cart'][:],
                "summary_rus": (
                    f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or message.from_user.first_name}:\n\n"
                    f"{summary_rus}\n\n–ò—Ç–æ–≥: {total_try}‚Ç∫ (‚âà{rub}‚ÇΩ, ${usd}, ‚Ç¥{uah})\n"
                    f"üìç –ê–¥—Ä–µ—Å: {data.get('address','‚Äî')}\n"
                    f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact','‚Äî')}\n"
                    f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment','‚Äî')}"
                ),
                "summary_en": (
                    f"üì• New order from @{message.from_user.username or message.from_user.first_name}:\n\n"
                    f"{summary_en}\n\nTotal: {total_try}‚Ç∫ (‚âà{rub}‚ÇΩ, ${usd}, ‚Ç¥{uah})\n"
                    f"üìç Address: {data.get('address','‚Äî')}\n"
                    f"üì± Contact: {data.get('contact','‚Äî')}\n"
                    f"üí¨ Comment: {data.get('comment','‚Äî')}"
                ),
                "total_try": total_try,
                "rates": rates,
                "address": data.get("address"),
                "contact": data.get("contact"),
                "comment": data.get("comment", "")
            }

            curr_text = f"{total_try}‚Ç∫ (‚âà {rub}‚ÇΩ, ${usd}, ‚Ç¥{uah})"
            pay_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            pay_kb.add(PAY_COD, PAY_TRANSFER)
            pay_kb.add(PAY_CRYPTO, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

            bot.send_message(
                cid,
                f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {curr_text}\n\n"
                f"üíµ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏: –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∫—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π (–ø–µ—Ä–µ–≤–æ–¥–æ–º —Ä—É–±–ª–∏ –∏ –≥—Ä–∏–≤–Ω—ã)\n\n"
                f"üí≥ –ü–µ—Ä–µ–≤–æ–¥ –≥—Ä–∏–≤–Ω–∞–º–∏ –∏–ª–∏ —Ä—É–±–ª—è–º–∏:\n"
                f"   ‚Ä¢ –≥—Ä–∏–≤–Ω—ã: –∫–∞—Ä—Ç–∞ {TRANSFER_UAH_CARD}\n"
                f"   ‚Ä¢ —Ä—É–±–ª–∏: {TRANSFER_RUB_PHONE}\n\n"
                f"‚Çø –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π: –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å {CRYPTO_ADDRESS}",
                reply_markup=pay_kb
            )
            return

    # ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏¬ª ‚Äî‚Äî‚Äî
    if text == PAY_COD and data.get("pending_order"):
        pend = data["pending_order"]
        bot.send_message(PERSONAL_CHAT_ID, pend["summary_rus"])
        bot.send_message(GROUP_CHAT_ID,    pend["summary_en"])
        bot.send_message(
            cid,
            "–°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∏—Ç–µ –∫—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ.",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
        )
        for o in pend["cart"]:
            cat = o['category']
            for itm in menu[cat]["flavors"]:
                if itm['flavor'] == o['flavor']:
                    itm['stock'] = max(itm.get('stock', 1) - 1, 0)
                    break
        save_menu(menu)
        data["cart"] = []
        data["pending_order"] = None
        data["wait_for_address"] = False
        data["wait_for_contact"] = False
        data["wait_for_comment"] = False
        return

    # ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ü–µ—Ä–µ–≤–æ–¥ –≥—Ä–∏–≤–Ω–∞–º–∏ –∏–ª–∏ —Ä—É–±–ª—è–º–∏¬ª ‚Äî‚Äî‚Äî
    if text == PAY_TRANSFER and data.get("pending_order"):
        pend = data["pending_order"]
        transfer_info = (
            "–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
            f"‚Ä¢ –ì—Ä–∏–≤–Ω—ã: –∫–∞—Ä—Ç–∞ {TRANSFER_UAH_CARD}\n"
            f"‚Ä¢ –†—É–±–ª–∏: {TRANSFER_RUB_PHONE}\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (TX-ID).\n"
            "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        bot.send_message(cid, transfer_info, reply_markup=view_cart_keyboard())
        data["awaiting_transfer_tx"] = True
        return

    # ‚Äî‚Äî‚Äî –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω–∞ –∏–ª–∏ TX-ID –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî‚Äî‚Äî
    if data.get("awaiting_transfer_tx") and message.content_type == "text":
        tx_info = message.text.strip()
        # –ó–∞–º–µ–Ω–∏—Ç–µ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é
        confirmed = True
        if confirmed:
            pend = data["pending_order"]
            bot.send_message(
                GROUP_CHAT_ID,
                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ (–≥—Ä–∏–≤–Ω—ã/—Ä—É–±–ª–∏) –ø–æ–ª—É—á–µ–Ω:\n{pend['summary_en']}\n–ü–ª–∞—Ç—ë–∂: {tx_info}"
            )
            bot.send_message(cid, "–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=get_main_keyboard())
            for o in pend["cart"]:
                cat = o['category']
                for itm in menu[cat]["flavors"]:
                    if itm['flavor'] == o['flavor']:
                        itm['stock'] = max(itm.get('stock', 1) - 1, 0)
                        break
            save_menu(menu)
            data["cart"] = []
            data["pending_order"] = None
            data["awaiting_transfer_tx"] = False
        else:
            bot.send_message(cid, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        return

    # ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π¬ª —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º $1 ‚Äî‚Äî‚Äî
    if text == PAY_CRYPTO and data.get("pending_order"):
        pend = data["pending_order"]
        total_try = pend["total_try"]
        rates = pend["rates"]

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TRON (TRC20) –≤ TRY –∏ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
        try:
            r = requests.get("https://api.coingecko.com/api/v3/simple/price",
                             params={"ids":"tron","vs_currencies":"try,usd"}, timeout=5)
            prices = r.json()
            tron_price_try = prices["tron"]["try"]
            usd_to_try = 1 / rates.get("USD", 1)
            adjusted_try = total_try + usd_to_try
            amount_trx = round(adjusted_try / tron_price_try, 2)
        except:
            amount_trx = None

        text_crypto  = f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_try}‚Ç∫ + —ç–∫–≤. $1 (–¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏).\n\n"
        if amount_trx:
            text_crypto += f"‚âà {amount_trx} TRX (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n`{CRYPTO_ADDRESS}`\n\n"
        else:
            text_crypto += f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TRX (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n`{CRYPTO_ADDRESS}`\n\n"
        text_crypto += (
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ TX-ID.\n"
            "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        bot.send_message(cid, text_crypto, parse_mode="Markdown", reply_markup=get_main_keyboard())
        data["awaiting_crypto_tx"] = True
        return

    # ‚Äî‚Äî‚Äî –û–∂–∏–¥–∞–Ω–∏–µ TX-ID –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ‚Äî‚Äî‚Äî
    if data.get("awaiting_crypto_tx") and message.content_type == "text":
        tx_hash = message.text.strip()
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω-—ç–∫—Å–ø–ª–æ—Ä–µ—Ä–µ
        confirmed = True
        if confirmed:
            pend = data["pending_order"]
            bot.send_message(
                GROUP_CHAT_ID,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π (TRC20) –ø–æ–ª—É—á–µ–Ω–∞ (tx: {tx_hash}):\n{pend['summary_en']}"
            )
            bot.send_message(cid, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=get_main_keyboard())
            for o in pend["cart"]:
                cat = o['category']
                for itm in menu[cat]["flavors"]:
                    if itm['flavor'] == o['flavor']:
                        itm['stock'] = max(itm.get('stock', 1) - 1, 0)
                        break
            save_menu(menu)
            data["cart"] = []
            data["pending_order"] = None
            data["awaiting_crypto_tx"] = False
        else:
            bot.send_message(cid, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        return

    # ‚Äî‚Äî‚Äî –ö–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏–π ‚Äî‚Äî‚Äî
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data["current_category"] = None
        data["wait_for_address"] = False
        data["wait_for_contact"] = False
        data["wait_for_comment"] = False
        data["pending_order"] = None
        data["awaiting_transfer_tx"] = False
        data["awaiting_crypto_tx"] = False
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())
        return

    # ‚Äî‚Äî‚Äî –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî‚Äî‚Äî
    if text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        data['cart'].clear()
        data['current_category'] = None
        data['wait_for_address'] = False
        data['wait_for_contact'] = False
        data['wait_for_comment'] = False
        bot.send_message(cid, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
        data['current_category'] = None
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())
        return

    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑" and not data.get('wait_for_address'):
        if not data['cart']:
            bot.send_message(cid, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return
        total_try = sum(i['price'] for i in data['cart'])
        summary = "\n".join(f"{i['category']}: {i['flavor']} ‚Äî {i['price']}‚Ç∫" for i in data['cart'])
        bot.send_message(
            cid,
            f"üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n{summary}\n\n–ò—Ç–æ–≥: {total_try}‚Ç∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:",
            reply_markup=address_keyboard()
        )
        data['wait_for_address'] = True
        return

    if text in menu:
        data['current_category'] = text
        bot.send_message(cid, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å ({text}):", reply_markup=get_flavors_keyboard(text))
        return

    cat = data.get('current_category')
    if cat:
        price = menu[cat]["price"]
        for it in menu[cat]["flavors"]:
            emoji = it.get("emoji", "").strip()
            flavor = it["flavor"]
            stock = it.get("stock", 0)
            label = f"{emoji} {flavor} ({price}‚Ç∫) [{stock} —à—Ç]" if emoji else f"{flavor} ({price}‚Ç∫) [{stock} —à—Ç]"
            if text == label and stock > 0:
                data['cart'].append({'category': cat, 'flavor': flavor, 'price': price})
                count = len(data['cart'])
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
                bot.send_message(
                    cid,
                    f"{cat} ‚Äî {flavor} ({price}‚Ç∫) –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ –∫–æ—Ä–∑–∏–Ω—É. –í –∫–æ—Ä–∑–∏–Ω–µ [{count}] —Ç–æ–≤–∞—Ä(–æ–≤).",
                    reply_markup=kb
                )
                return
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_flavors_keyboard(cat))
        return

if __name__ == "__main__":
    bot.remove_webhook()
    bot.polling(none_stop=True)
