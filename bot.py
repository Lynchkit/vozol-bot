import os
import json
import requests
import telebot
from telebot import types

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî
TOKEN = os.getenv("TOKEN", "7931006644:AAEVeRpgQivZL5Qmv113tqNlWWAF6sndwbk")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1002414380144"))
PERSONAL_CHAT_ID = int(os.getenv("PERSONAL_CHAT_ID", "424751188"))
ADMIN_IDS = {PERSONAL_CHAT_ID}
MENU_PATH = "menu.json"
DEFAULT_CATEGORY_PRICE = 1300  # –¶–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

# ‚ñº‚ñº‚ñº –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º Webhook —á–µ—Ä–µ–∑ HTTP –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º TeleBot
delete_url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
try:
    requests.get(delete_url, timeout=5)
except Exception:
    pass
# ‚ñº‚ñº‚ñº

bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()  # –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤, –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
user_data = {}

# ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é ‚Äî‚Äî‚Äî
# –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç menu.json:
# {
#   "CategoryName": {
#       "price": 1000,
#       "flavors": [
#           { "emoji": "üçì", "flavor": "Strawberry Mango", "stock": 3 },
#           ...
#       ]
#   },
#   ...
# }
def load_menu():
    with open(MENU_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_menu(menu):
    with open(MENU_PATH, "w", encoding="utf-8") as f:
        json.dump(menu, f, ensure_ascii=False, indent=2)

menu = load_menu()

# ‚Äî‚Äî‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî‚Äî‚Äî
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in menu:
        kb.add(cat)
    return kb

def get_flavors_keyboard(cat):
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∫—É—Å–∞–º–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ cat.
    –¶–µ–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∫—É—Å–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ menu[cat]["price"].
    –ï—Å–ª–∏ emoji –ø—É—Å—Ç–æ–µ, –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
    """
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    category_price = menu[cat]["price"]
    for it in menu[cat]["flavors"]:
        if it.get("stock", 0) > 0:
            emoji = it.get("emoji", "").strip()
            flavor = it["flavor"]
            stock = it.get("stock", 0)
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∫—É –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –ø—Ä–æ–±–µ–ª–∞, –µ—Å–ª–∏ emoji –ø—É—Å—Ç–æ–π
            if emoji:
                label = f"{emoji} {flavor} ({category_price}‚Ç∫) [{stock} —à—Ç]"
            else:
                label = f"{flavor} ({category_price}‚Ç∫) [{stock} —à—Ç]"
            kb.add(label)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def address_keyboard():
    """
    –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞.
    """
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π", request_location=True))
    kb.add("üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ")
    kb.add("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def contact_keyboard():
    """
    –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    """
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    kb.add("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∏–∫")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def comment_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚úèÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É")
    kb.add("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    return kb

def edit_action_keyboard():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ /change:
    ‚ûï Add Category   ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    ‚ûñ Remove Category ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    ‚ûï Add Flavor     ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å
    ‚ûñ Remove Flavor   ‚Äî —É–±—Ä–∞—Ç—å –≤–∫—É—Å
    üí≤ Fix Price      ‚Äî –∑–∞–¥–∞—Ç—å —Ü–µ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—Å–µ –µ–µ –≤–∫—É—Å—ã –ø–æ–ª—É—á–∞—Ç —ç—Ç—É —Ü–µ–Ω—É)
    ALL IN           ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    ‚ùå Cancel         ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚ûï Add Category", "‚ûñ Remove Category")
    kb.add("‚ûï Add Flavor",   "‚ûñ Remove Flavor")
    kb.add("üí≤ Fix Price",   "ALL IN")
    kb.add("‚ùå Cancel")
    return kb

# ‚Äî‚Äî‚Äî –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç (–¥–ª—è /convert) ‚Äî‚Äî‚Äî
def fetch_rates():
    sources = [
        ("https://api.exchangerate.host/latest", {"base":"TRY","symbols":"RUB,USD,UAH"}),
        ("https://open.er-api.com/v6/latest/TRY", {})
    ]
    for url, params in sources:
        try:
            r = requests.get(url, params=params, timeout=5)
            data = r.json()
            rates = data.get("rates") or data.get("conversion_rates")
            if rates:
                return {k: rates[k] for k in ("RUB","USD","UAH") if k in rates}
        except:
            continue
    return {"RUB":0, "USD":0, "UAH":0}

@bot.message_handler(commands=['convert'])
def handle_convert(message):
    parts = message.text.split()[1:]
    if not parts:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏: /convert 1300 1400 ...")
        return
    rates = fetch_rates()
    if not any(rates.values()):
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")
        return
    out = []
    for p in parts:
        try:
            t = float(p)
        except:
            out.append(f"{p}‚Ç∫ ‚Üí –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            continue
        rub = round(t * rates.get("RUB", 0) + 400, 2)
        usd = round(t * rates.get("USD", 0) + 2,   2)
        uah = round(t * rates.get("UAH", 0),      2)
        out.append(f"{int(t)}‚Ç∫ ‚Üí {rub}‚ÇΩ, ${usd}, ‚Ç¥{uah}")
    bot.reply_to(message, "\n".join(out))

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /change ‚Äî‚Äî‚Äî
@bot.message_handler(commands=['change'])
def cmd_change(message):
    if message.chat.id not in ADMIN_IDS:
        return
    data = user_data.setdefault(message.chat.id, {
        "cart": [], "current_category": None,
        "wait_for_address": False, "wait_for_contact": False, "wait_for_comment": False
    })
    data['edit_phase'] = 'choose_action'
    bot.send_message(message.chat.id, "Menu editing: choose action", reply_markup=edit_action_keyboard())

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî‚Äî‚Äî
@bot.message_handler(commands=['start'])
def cmd_start(message):
    user_data[message.chat.id] = {
        "cart": [], "current_category": None,
        "wait_for_address": False, "wait_for_contact": False, "wait_for_comment": False
    }
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_keyboard()
    )

# ‚Äî‚Äî‚Äî –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî‚Äî‚Äî
@bot.message_handler(content_types=['text','location','venue','contact'])
def universal_handler(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (—á—Ç–æ–±—ã /start –∏ /change –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–∏—Å—å)
    if message.text and message.text.startswith('/'):
        return

    cid = message.chat.id
    text = message.text or ""
    data = user_data.setdefault(cid, {
        "cart": [], "current_category": None,
        "wait_for_address": False, "wait_for_contact": False, "wait_for_comment": False
    })

    # ‚Äî –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é (/change) ‚Äî
    if data.get('edit_phase'):
        phase = data['edit_phase']

        # –ö–Ω–æ–ø–∫–∞ ‚ùå Cancel ‚Äî –æ—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        if text == "‚ùå Cancel":
            data.pop('edit_phase', None)
            data.pop('edit_cat', None)
            data.pop('new_price', None)
            bot.send_message(cid, "Menu editing cancelled.", reply_markup=get_main_keyboard())
            return

        # 1) –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if phase == 'choose_action':
            if text == "‚ûï Add Category":
                data['edit_phase'] = 'add_category'
                bot.send_message(cid, "Enter new category name:")
            elif text == "‚ûñ Remove Category":
                data['edit_phase'] = 'remove_category'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚ùå Cancel")
                bot.send_message(cid, "Select category to remove:", reply_markup=kb)
            elif text == "‚ûï Add Flavor":
                data['edit_phase'] = 'choose_cat_add_flavor'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚ùå Cancel")
                bot.send_message(cid, "Select category to add flavor to:", reply_markup=kb)
            elif text == "‚ûñ Remove Flavor":
                data['edit_phase'] = 'choose_cat_remove_flavor'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚ùå Cancel")
                bot.send_message(cid, "Select category to remove flavor from:", reply_markup=kb)
            elif text == "üí≤ Fix Price":
                data['edit_phase'] = 'choose_fix_price_cat'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚ùå Cancel")
                bot.send_message(cid, "Select category to fix price for:", reply_markup=kb)
            elif text == "ALL IN":
                data['edit_phase'] = 'choose_all_in_cat'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for cat in menu:
                    kb.add(cat)
                kb.add("‚ùå Cancel")
                bot.send_message(cid, "Select category to replace full flavor list:", reply_markup=kb)
            else:
                bot.send_message(cid, "Choose action:", reply_markup=edit_action_keyboard())
            return

        # 2) –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if phase == 'add_category':
            new_cat = text.strip()
            if not new_cat or new_cat in menu:
                bot.send_message(cid, "Invalid or existing name. Try again:")
                return
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ü–µ–Ω–æ–π –∏ –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –≤–∫—É—Å–æ–≤
            menu[new_cat] = {
                "price": DEFAULT_CATEGORY_PRICE,
                "flavors": []
            }
            save_menu(menu)
            data.pop('edit_cat', None)
            data['edit_phase'] = 'choose_action'
            bot.send_message(
                cid,
                f"Category ¬´{new_cat}¬ª added with price {DEFAULT_CATEGORY_PRICE}‚Ç∫.",
                reply_markup=edit_action_keyboard()
            )
            return

        # 3) –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if phase == 'remove_category':
            if text in menu:
                del menu[text]
                save_menu(menu)
                data.pop('edit_cat', None)
                data['edit_phase'] = 'choose_action'
                bot.send_message(cid, f"Category ¬´{text}¬ª removed.", reply_markup=edit_action_keyboard())
            else:
                bot.send_message(cid, "Select valid category.")
            return

        # 4) –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫—É—Å–∞
        if phase == 'choose_cat_add_flavor':
            if text in menu:
                data['edit_cat'] = text
                data['edit_phase'] = 'add_flavor'
                bot.send_message(cid, "Enter flavor and quantity (e.g.: Strawberry Mango - 1):")
            else:
                bot.send_message(cid, "Choose category from the list.")
            return

        # 5) –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if phase == 'add_flavor':
            cat = data.get('edit_cat')
            if not cat:
                data['edit_phase'] = 'choose_action'
                data.pop('edit_cat', None)
                bot.send_message(cid, "Category error. Back to menu.", reply_markup=edit_action_keyboard())
                return
            if '-' not in text:
                bot.send_message(cid, "Use format: Name - qty")
                return
            name, qty = map(str.strip, text.rsplit('-', 1))
            if not qty.isdigit():
                bot.send_message(cid, "Quantity must be a number.")
                return
            menu[cat]["flavors"].append({
                "emoji": "",
                "flavor": name,
                "stock": int(qty)
            })
            save_menu(menu)
            data.pop('edit_cat', None)
            data['edit_phase'] = 'choose_action'
            bot.send_message(cid, f"Added flavor ¬´{name}¬ª ({qty} pcs) to ¬´{cat}¬ª.", reply_markup=edit_action_keyboard())
            return

        # 6) –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∫—É—Å–∞
        if phase == 'choose_cat_remove_flavor':
            if text in menu:
                data['edit_cat'] = text
                data['edit_phase'] = 'remove_flavor'
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for it in menu[text]["flavors"]:
                    kb.add(f"{it['flavor']} [{it['stock']} —à—Ç]")
                kb.add("‚ùå Cancel")
                bot.send_message(cid, "Select flavor to remove:", reply_markup=kb)
            else:
                bot.send_message(cid, "Choose category from the list.")
            return

        # 7) –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if phase == 'remove_flavor':
            cat = data.get('edit_cat')
            flavor_name = text.split(' [')[0]
            if cat and flavor_name:
                for it in menu[cat]["flavors"][:]:
                    if it['flavor'] == flavor_name:
                        if it['stock'] > 1:
                            it['stock'] -= 1
                        else:
                            menu[cat]["flavors"].remove(it)
                        save_menu(menu)
                        bot.send_message(cid, f"Updated flavor ¬´{flavor_name}¬ª in ¬´{cat}¬ª.", reply_markup=edit_action_keyboard())
                        data.pop('edit_cat', None)
                        data['edit_phase'] = 'choose_action'
                        return
                bot.send_message(cid, "Flavor not found.", reply_markup=edit_action_keyboard())
            else:
                bot.send_message(cid, "Error, choose again.", reply_markup=edit_action_keyboard())
            return

        # 8) –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ü–µ–Ω—ã
        if phase == 'choose_fix_price_cat':
            if text in menu:
                data['edit_cat'] = text
                data['edit_phase'] = 'enter_new_price'
                bot.send_message(cid, f"Enter new price in ‚Ç∫ for category ¬´{text}¬ª:")
            else:
                bot.send_message(cid, "Choose category from the list.")
            return

        # 9) –í–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if phase == 'enter_new_price':
            cat = data.get('edit_cat')
            try:
                new_price = float(text.strip())
            except:
                bot.send_message(cid, "Invalid price format. Enter a number, e.g. 1500:")
                return
            menu[cat]["price"] = int(new_price)
            save_menu(menu)
            bot.send_message(cid, f"Price for category ¬´{cat}¬ª set to {int(new_price)}‚Ç∫ (all flavors inherit this price).", reply_markup=edit_action_keyboard())
            data.pop('edit_cat', None)
            data.pop('new_price', None)
            data['edit_phase'] = 'choose_action'
            return

        # 10) –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è ALL IN (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤)
        if phase == 'choose_all_in_cat':
            if text in menu:
                data['edit_cat'] = text
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∫—É—Å—ã –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
                current_list = []
                for itm in menu[text]["flavors"]:
                    current_list.append(f"{itm['flavor']} - {itm['stock']}")
                joined = "\n".join(current_list) if current_list else "(–ø—É—Å—Ç–æ)"
                bot.send_message(
                    cid,
                    f"Current flavors in ¬´{text}¬ª (one per line as \"Name - qty\"):\n\n{joined}\n\n"
                    "Send the full updated list in the same format. Each line: ‚ÄúName - qty‚Äù."
                )
                data['edit_phase'] = 'replace_all_in'
            else:
                bot.send_message(cid, "Choose category from the list.")
            return

        # 11) –ó–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ALL IN)
        if phase == 'replace_all_in':
            cat = data.get('edit_cat')
            lines = text.strip().splitlines()
            new_flavors = []
            for line in lines:
                if '-' not in line:
                    continue
                name, qty = map(str.strip, line.rsplit('-', 1))
                if not qty.isdigit() or not name:
                    continue
                new_flavors.append({
                    "emoji": "",
                    "flavor": name,
                    "stock": int(qty)
                })
            # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–µ–∂–Ω—é—é —Ü–µ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            menu[cat]["flavors"] = new_flavors
            save_menu(menu)
            bot.send_message(cid, f"Full flavor list for ¬´{cat}¬ª has been replaced.", reply_markup=edit_action_keyboard())
            data.pop('edit_cat', None)
            data['edit_phase'] = 'choose_action'
            return

        # –ï—Å–ª–∏ —Ñ–∞–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è
        data['edit_phase'] = 'choose_action'
        bot.send_message(cid, "Back to editing menu:", reply_markup=edit_action_keyboard())
        return

    # ‚Äî –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏/—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî
    if data.get('wait_for_address'):
        # –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª: –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç–º–µ–Ω–∏–≤ –∞–¥—Ä–µ—Å
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            data['wait_for_address'] = False
            data['current_category'] = None
            bot.send_message(cid, "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=get_main_keyboard())
            return

        if text == "üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ":
            bot.send_message(
                cid,
                "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É:\nüìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Üí ¬´–í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ¬ª ‚Üí –º–µ—Ç–∫–∞ ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≥–µ–æ–º–µ—Ç–∫—É (venue)
        if message.content_type == 'venue' and message.venue:
            v = message.venue
            address = f"{v.title}, {v.address}\nüåç https://maps.google.com/?q={v.location.latitude},{v.location.longitude}"
        elif message.content_type == 'location' and message.location:
            lat, lon = message.location.latitude, message.location.longitude
            address = f"üåç https://maps.google.com/?q={lat},{lon}"
        elif text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å":
            bot.send_message(cid, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=types.ReplyKeyboardRemove())
            return
        elif message.content_type == 'text' and message.text:
            address = message.text.strip()
        else:
            bot.send_message(cid, "–ù—É–∂–µ–Ω –∞–¥—Ä–µ—Å –∏–ª–∏ –ª–æ–∫–∞—Ü–∏—è:", reply_markup=address_keyboard())
            return

        data['address'] = address
        data['wait_for_address'] = False
        data['wait_for_contact'] = True
        bot.send_message(cid, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=contact_keyboard())
        return

    # ‚Äî –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º–∏ –±–ª–æ–∫–∞–º–∏ ‚Äî
    if data.get('wait_for_contact'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª: –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            data['wait_for_address'] = True
            data['wait_for_contact'] = False
            bot.send_message(cid, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=address_keyboard())
            return

        if text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∏–∫":
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram-–Ω–∏–∫ (–±–µ–∑ @):", reply_markup=types.ReplyKeyboardRemove())
            return

        if message.content_type == 'contact' and message.contact:
            contact = message.contact.phone_number
        elif message.content_type == 'text' and message.text:
            contact = "@" + message.text.strip().lstrip("@")
        else:
            bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=contact_keyboard())
            return

        data['contact'] = contact
        data['wait_for_contact'] = False
        data['wait_for_comment'] = True
        bot.send_message(cid, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:", reply_markup=comment_keyboard())
        return

    # ‚Äî –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º ‚Äî
    if data.get('wait_for_comment'):
        if text == "‚úèÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É":
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", reply_markup=types.ReplyKeyboardRemove())
            return

        if message.content_type == 'text' and message.text and text != "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
            data['comment'] = message.text.strip()
            bot.send_message(
                cid,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑").add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            )
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            data['wait_for_contact'] = True
            data['wait_for_comment'] = False
            bot.send_message(cid, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:", reply_markup=contact_keyboard())
            return

        if text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
            cart = data['cart']
            total_try = sum(i['price'] for i in cart)
            summary = "\n".join(f"{i['category']}: {i['flavor']} ‚Äî {i['price']}‚Ç∫" for i in cart)
            rates = fetch_rates()
            rub = round(total_try * rates.get("RUB", 0) + 400, 2)
            usd = round(total_try * rates.get("USD", 0) + 2,   2)
            uah = round(total_try * rates.get("UAH", 0),      2)
            conv = f"({rub}‚ÇΩ, ${usd}, ‚Ç¥{uah})"
            full = (
                f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or message.from_user.first_name}:\n\n"
                f"{summary}\n\n–ò—Ç–æ–≥: {total_try}‚Ç∫ {conv}\n"
                f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
                f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment','‚Äî')}"
            )
            # –£–º–µ–Ω—å—à–∞–µ–º stock –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞
            for o in cart:
                cat = o['category']
                for itm in menu[cat]["flavors"]:
                    if itm['flavor'] == o['flavor']:
                        itm['stock'] = max(itm.get('stock', 1) - 1, 0)
                        break
            save_menu(menu)

            # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ user_data
            data['cart'] = []
            data['current_category'] = None
            data['wait_for_address'] = False
            data['wait_for_contact'] = False
            data['wait_for_comment'] = False
            data.pop('comment', None)
            data.pop('address', None)
            data.pop('contact', None)

            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.add("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
            bot.send_message(cid, "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ.", reply_markup=kb)
            bot.send_message(GROUP_CHAT_ID, full)
            bot.send_message(PERSONAL_CHAT_ID, "[–ö–æ–ø–∏—è –∑–∞–∫–∞–∑–∞]\n\n" + full)
            return

    # ‚Äî –û–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞ ‚Äî (–µ—Å–ª–∏ –Ω–µ –≤ —Å—Ç–∞–¥–∏–∏ –∞–¥—Ä–µ—Å/–∫–æ–Ω—Ç–∞–∫—Ç/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π) ‚Äî

    # ¬´–ù–∞–∑–∞–¥¬ª –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data['current_category'] = None
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())
        return

    # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    if text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        data['cart'].clear()
        data['current_category'] = None
        data['wait_for_address'] = False
        data['wait_for_contact'] = False
        data['wait_for_comment'] = False
        bot.send_message(cid, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    # –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë (–∫ –∫–æ—Ä–∑–∏–Ω–µ)
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
        data['current_category'] = None
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())
        return

    # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚Üí –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑" and not data.get('wait_for_address'):
        if not data['cart']:
            bot.send_message(cid, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return
        total_try = sum(i['price'] for i in data['cart'])
        summary = "\n".join(f"{i['category']}: {i['flavor']} ‚Äî {i['price']}‚Ç∫" for i in data['cart'])
        bot.send_message(
            cid,
            f"üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n{summary}\n\n–ò—Ç–æ–≥: {total_try}‚Ç∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:",
            reply_markup=address_keyboard()
        )
        data['wait_for_address'] = True
        return

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
    if text in menu:
        data['current_category'] = text
        bot.send_message(cid, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å ({text}):", reply_markup=get_flavors_keyboard(text))
        return

    # –í—ã–±–æ—Ä –≤–∫—É—Å–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cat = data.get('current_category')
    if cat:
        category_price = menu[cat]["price"]
        for it in menu[cat]["flavors"]:
            emoji = it.get("emoji", "").strip()
            flavor = it["flavor"]
            stock = it.get("stock", 0)
            if emoji:
                label = f"{emoji} {flavor} ({category_price}‚Ç∫) [{stock} —à—Ç]"
            else:
                label = f"{flavor} ({category_price}‚Ç∫) [{stock} —à—Ç]"

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π ¬´–º–µ—Ç–∫–æ–π¬ª –≤–∫—É—Å–∞
            if text == label and stock > 0:
                data['cart'].append({
                    'category': cat,
                    'emoji':    emoji,
                    'flavor':   flavor,
                    'price':    category_price
                })
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
                bot.send_message(cid, f"{flavor} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=kb)
                return
        # –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–æ –Ω–∏ —Å –æ–¥–Ω–æ–π ¬´–º–µ—Ç–∫–æ–π¬ª, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∫—É—Å–æ–≤
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_flavors_keyboard(cat))
        return

if __name__ == "__main__":
    bot.polling()
